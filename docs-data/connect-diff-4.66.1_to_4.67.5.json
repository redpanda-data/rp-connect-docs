{
  "comparison": {
    "oldVersion": "4.66.1",
    "newVersion": "4.67.5",
    "timestamp": "2025-10-15T19:48:07.584Z"
  },
  "summary": {
    "newComponents": 4,
    "removedComponents": 2,
    "newFields": 8,
    "removedFields": 22
  },
  "details": {
    "newComponents": [
      {
        "name": "legacy_redpanda_migrator",
        "type": "inputs",
        "status": "deprecated",
        "version": "4.37.0",
        "description": "\nReads a batch of messages from a Kafka broker and waits for the output to acknowledge the writes before updating the Kafka consumer group offset.\n\nThis input should be used in combination with a `legacy_redpanda_migrator` output.\n\nWhen a consumer group is specified this input consumes one or more topics where partitions will automatically balance across any other connected clients with the same consumer group. When a consumer group is not specified topics can either be consumed in their entirety or with explicit partitions.\n\nIt provides the same delivery guarantees and ordering semantics as the `redpanda` input.\n\n== Metrics\n\nEmits a `redpanda_lag` metric with `topic` and `partition` labels for each consumed topic.\n\n== Metadata\n\nThis input adds the following metadata fields to each message:\n\n```text\n- kafka_key\n- kafka_topic\n- kafka_partition\n- kafka_offset\n- kafka_lag\n- kafka_timestamp_ms\n- kafka_timestamp_unix\n- kafka_tombstone_message\n- All record headers\n```\n"
      },
      {
        "name": "legacy_redpanda_migrator_offsets",
        "type": "inputs",
        "status": "deprecated",
        "version": "4.45.0",
        "description": "\nThis input reads consumer group updates via the `OffsetFetch` API and should be used in combination with the `legacy_redpanda_migrator_offsets` output.\n\n== Metadata\n\nThis input adds the following metadata fields to each message:\n\n```text\n- kafka_offset_topic\n- kafka_offset_group\n- kafka_offset_partition\n- kafka_offset_commit_timestamp\n- kafka_offset_metadata\n- kafka_is_high_watermark\n```\n"
      },
      {
        "name": "legacy_redpanda_migrator",
        "type": "outputs",
        "status": "deprecated",
        "version": "4.37.0",
        "description": "\nWrites a batch of messages to a Kafka broker and waits for acknowledgement before propagating it back to the input.\n\nThis output should be used in combination with a `legacy_redpanda_migrator` input identified by the label specified in\n`input_resource` which it can query for topic and ACL configurations. Once connected, the output will attempt to\ncreate all topics which the input consumes from along with their ACLs.\n\nIf the configured broker does not contain the current message topic, this output attempts to create it along with its\nACLs.\n\nACL migration adheres to the following principles:\n\n- `ALLOW WRITE` ACLs for topics are not migrated\n- `ALLOW ALL` ACLs for topics are downgraded to `ALLOW READ`\n- Only topic ACLs are migrated, group ACLs are not migrated\n"
      },
      {
        "name": "legacy_redpanda_migrator_offsets",
        "type": "outputs",
        "status": "deprecated",
        "version": "4.37.0",
        "description": "This output should be used in combination with the `legacy_redpanda_migrator_offsets` input"
      }
    ],
    "removedComponents": [
      {
        "name": "redpanda_migrator_offsets",
        "type": "inputs",
        "status": "beta",
        "version": "4.45.0",
        "description": "\nThis input reads consumer group updates via the `OffsetFetch` API and should be used in combination with the `redpanda_migrator_offsets` output.\n\n== Metadata\n\nThis input adds the following metadata fields to each message:\n\n```text\n- kafka_offset_topic\n- kafka_offset_group\n- kafka_offset_partition\n- kafka_offset_commit_timestamp\n- kafka_offset_metadata\n- kafka_is_high_watermark\n```\n"
      },
      {
        "name": "redpanda_migrator_offsets",
        "type": "outputs",
        "status": "beta",
        "version": "4.37.0",
        "description": "This output should be used in combination with the `redpanda_migrator_offsets` input"
      }
    ],
    "newFields": [
      {
        "component": "inputs:microsoft_sql_server_cdc",
        "field": "checkpoint_cache_table_name",
        "description": "The multipart identifier for the checkpoint cache table name. If no `checkpoint_cache` field is specified, this input will automatically create a table and stored procedure under the `rpcn` schema to act as a checkpoint cache. This table stores the latest processed Log Sequence Number (LSN) that has been successfully delivered, allowing Redpanda Connect to resume from that point upon restart rather than reconsume the entire change table."
      },
      {
        "component": "inputs:microsoft_sql_server_cdc",
        "field": "checkpoint_cache_key",
        "description": "The key to use to store the snapshot position in `checkpoint_cache`. An alternative key can be provided if multiple CDC inputs share the same cache."
      },
      {
        "component": "inputs:redpanda_migrator",
        "field": "schema_registry",
        "description": "Configuration for schema registry integration. Enables migration of schema subjects, versions, and compatibility settings between clusters."
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "schema_registry",
        "description": "Configuration for schema registry integration. Enables migration of schema subjects, versions, and compatibility settings between clusters."
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "consumer_groups"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "topic_replication_factor",
        "description": "The replication factor for created topics. If not specified, inherits the replication factor from source topics. Useful when migrating to clusters with different sizes."
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "sync_topic_acls",
        "description": "Whether to synchronise topic ACLs from source to destination cluster. ACLs are transformed safely: ALLOW WRITE permissions are excluded, and ALLOW ALL is downgraded to ALLOW READ to prevent conflicts."
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "serverless",
        "description": "Enable serverless mode for Redpanda Cloud serverless clusters. This restricts topic configurations and schema features to those supported by serverless environments."
      }
    ],
    "removedFields": [
      {
        "component": "inputs:microsoft_sql_server_cdc",
        "field": "checkpoint_key"
      },
      {
        "component": "inputs:redpanda_migrator",
        "field": "timely_nacks_maximum_wait"
      },
      {
        "component": "inputs:redpanda_migrator",
        "field": "output_resource"
      },
      {
        "component": "inputs:redpanda_migrator",
        "field": "replication_factor_override"
      },
      {
        "component": "inputs:redpanda_migrator",
        "field": "replication_factor"
      },
      {
        "component": "inputs:redpanda_migrator",
        "field": "multi_header"
      },
      {
        "component": "inputs:redpanda_migrator",
        "field": "batch_size"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "key"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "partition"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "metadata"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "timestamp"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "timestamp_ms"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "topic_prefix"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "max_in_flight"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "input_resource"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "replication_factor_override"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "replication_factor"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "translate_schema_ids"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "is_serverless"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "schema_registry_output_resource"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "rack_id"
      },
      {
        "component": "outputs:redpanda_migrator",
        "field": "batching"
      }
    ]
  }
}